# -*- coding: utf-8 -*-
"""policy-gradient-agent.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N7y3sBS3jncRyrePZZJfB3uRpgYhZYUv
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/Lecture/2023/Reinforcement/stock

"""# 1. Install Libraries"""

import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()

"""# 2. Fetch the Data"""

df = pd.read_csv('dataset/S&P500.csv')
df['Date'] = pd.to_datetime(df['Date'])
df = df.sort_values('Date', ascending=True)
df.head()
df.tail()

"""# 3. Define the policy-gradient Agent"""

# Commented out IPython magic to ensure Python compatibility.
class Agent:

    LEARNING_RATE = 1e-4
    LAYER_SIZE = 256
    GAMMA = 0.9
    OUTPUT_SIZE = 3

    def __init__(self, state_size, window_size, trend, skip):
        # 에이전트의 상태 크기 및 창 크기 등의 초기화
        self.state_size = state_size
        self.window_size = window_size
        self.half_window = window_size // 2
        self.trend = trend
        self.skip = skip

        # TensorFlow 플레이스홀더 정의
        self.X = tf.placeholder(tf.float32, (None, self.state_size))
        self.REWARDS = tf.placeholder(tf.float32, (None))
        self.ACTIONS = tf.placeholder(tf.int32, (None))

        # 신경망 구성
        feed_forward = tf.layers.dense(self.X, self.LAYER_SIZE, activation=tf.nn.relu)
        self.logits = tf.layers.dense(feed_forward, self.OUTPUT_SIZE, activation=tf.nn.softmax)

        # 손실 및 최적화 연산 정의
        input_y = tf.one_hot(self.ACTIONS, self.OUTPUT_SIZE)
        loglike = tf.log((input_y * (input_y - self.logits) + (1 - input_y) * (input_y + self.logits)) + 1)
        rewards = tf.tile(tf.reshape(self.REWARDS, (-1, 1)), [1, self.OUTPUT_SIZE])
        self.cost = -tf.reduce_mean(loglike * (rewards + 1))
        self.optimizer = tf.train.AdamOptimizer(learning_rate=self.LEARNING_RATE).minimize(self.cost)

        # TensorFlow 세션 초기화
        self.sess = tf.InteractiveSession()
        self.sess.run(tf.global_variables_initializer())


    def predict(self, inputs):
        return self.sess.run(self.logits, feed_dict={self.X:inputs})

    def get_state(self, t):
        # 현재 시간을 기준으로 상태를 반환하는 메서드
        # 상태는 주어진 시간의 윈도우 크기에 따라 생성됨
        window_size = self.window_size + 1
        d = t - window_size + 1 # 현재 시간을 중심으로 한 윈도우의 시작 위치를 계산
        block = self.trend[d : t + 1] if d >= 0 else -d * [self.trend[0]] + self.trend[0 : t + 1]
        res = [] # 주가의 차이를 계산하여 각 시간 단계에서의 주가 변동을 나타내는 리스트를 생성
        for i in range(window_size - 1):
            res.append(block[i + 1] - block[i])
        return np.array([res])

    def discount_rewards(self, r):
        discounted_r = np.zeros_like(r)
        running_add = 0
        for t in reversed(range(0, r.size)):
            running_add = running_add * self.GAMMA + r[t]
            discounted_r[t] = running_add
        return discounted_r

    def get_predicted_action(self, sequence):
        prediction = self.predict(np.array(sequence))[0]
        return np.argmax(prediction)


    def buy(self, initial_money):
        starting_money = initial_money
        states_sell = []
        states_buy = []
        inventory = []
        state = self.get_state(0)

        # 시간에 따라 주식 거래 진행
        for t in range(0, len(self.trend) - 1, self.skip):
            action = self.get_predicted_action(state)
            next_state = self.get_state(t + 1)

            # Buy
            if action == 1 and initial_money >= self.trend[t] and t < (len(self.trend) - self.half_window):
                inventory.append(self.trend[t])
                initial_money -= self.trend[t]
                states_buy.append(t)
                print('day %d: buy 1 unit at price %f, total balance %f'% (t, self.trend[t], initial_money))

            # Sell
            elif action == 2 and len(inventory):
                bought_price = inventory.pop(0)
                initial_money += self.trend[t]
                states_sell.append(t)
                try:
                    invest = ((close[t] - bought_price) / bought_price) * 100
                except:
                    invest = 0
                print(
                    'day %d, sell 1 unit at price %f, investment %f %%, total balance %f,'
#                     % (t, close[t], invest, initial_money)
                )

            state = next_state

        # 투자 수익률 및 총 이익 계산
        invest = ((initial_money - starting_money) / starting_money) * 100
        total_gains = initial_money - starting_money
        return states_buy, states_sell, total_gains, invest


    def train(self, iterations, checkpoint, initial_money):
        for i in range(iterations):
            ep_history = [] # 에피소드 히스토리 초기화
            total_profit = 0 # 총 이익 초기화
            inventory = [] # 보유 중인 주식의 가격을 저장하는 배열 초기화
            state = self.get_state(0) # 초기 상태 설정
            starting_money = initial_money # 초기 자본 설정

            for t in range(0, len(self.trend) - 1, self.skip):
                action = self.get_predicted_action(state)
                next_state = self.get_state(t + 1)

                # Buy
                if action == 1 and starting_money >= self.trend[t] and t < (len(self.trend) - self.half_window):
                    inventory.append(self.trend[t])
                    starting_money -= close[t]
                # Sell
                elif action == 2 and len(inventory):
                    bought_price = inventory.pop(0)
                    total_profit += self.trend[t] - bought_price
                    starting_money += self.trend[t]

                 # 에피소드 히스토리에 현재 상태 및 행동 정보
                ep_history.append([state,action,starting_money,next_state])
                state = next_state # 다음 상태로 갱신

            # 에피소드 히스토리를 NumPy 배열로 변환
            ep_history = np.array(ep_history)
            # discount_rewards 적용
            ep_history[:,2] = self.discount_rewards(ep_history[:,2])
            # 비용 및 최적화 연산 수행
            cost, _ = self.sess.run([self.cost, self.optimizer], feed_dict={self.X:np.vstack(ep_history[:,0]),
                                                    self.REWARDS:ep_history[:,2],
                                                    self.ACTIONS:ep_history[:,1]})
            # 주어진 checkpoint에 도달할 때마다 훈련 결과 출력
            if (i+1) % checkpoint == 0:
                print('epoch: %d, total rewards: %f.3, cost: %f, total money: %f'%(i + 1, total_profit, cost,
                                                                                  starting_money))

"""# 4. Train the Agnet"""

close = df.Close.values.tolist()
initial_money = 10000
window_size = 30
skip = 1
agent = Agent(state_size = window_size,
             window_size = window_size,
             trend = close,
             skip = skip)
agent.train(iterations = 200, checkpoint = 10, initial_money = initial_money)

"""# 5. Test the Agent"""

states_buy, states_sell, total_gains, invest = agent.buy(initial_money = initial_money)

"""# 6. Polt the Signals"""

fig = plt.figure(figsize = (15,5))
plt.plot(close, color='r', lw=2.)
plt.plot(close, '^', markersize=10, color='m', label = 'buying signal', markevery = states_buy)
plt.plot(close, 'v', markersize=10, color='k', label = 'selling signal', markevery = states_sell)
plt.title('policy-gradient \n total gains %f, total investment %f%%'%(total_gains, invest))
plt.legend()
plt.show()

print(('policy-gradient \n total gains %f, total investment %f%%'%(total_gains, invest)))

fig = plt.figure(figsize = (15,5))
plt.plot(close, color='r', lw=2.)
plt.title('S&P500')
plt.legend()
plt.show()