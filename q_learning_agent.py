# -*- coding: utf-8 -*-
"""q-learning-agent.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u9Z_5KMP2-586BfkCh7B0wltTTvvcTGw
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/Lecture/2023/Reinforcement/stock

"""# 1. Install Libraries"""

import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()

"""# 2. Fetch the Data"""

df = pd.read_csv('dataset/S&P500.csv')
df['Date'] = pd.to_datetime(df['Date'])
df = df.sort_values('Date', ascending=True)
df.head()
df.tail()

"""# 3. Define the Q-learning Agent"""

# Commented out IPython magic to ensure Python compatibility.
from collections import deque
import random


class Agent:
    def __init__(self, state_size, window_size, trend, skip, batch_size):
        self.state_size = state_size
        self.window_size = window_size
        self.half_window = window_size // 2
        self.trend = trend
        self.skip = skip
        self.action_size = 3
        self.batch_size = batch_size
        self.memory = deque(maxlen = 1000)
        self.inventory = []

        self.gamma = 0.95
        self.epsilon = 0.5
        self.epsilon_min = 0.01
        self.epsilon_decay = 0.999

        tf.reset_default_graph()
        self.sess = tf.InteractiveSession()
        self.X = tf.placeholder(tf.float32, [None, self.state_size])
        self.Y = tf.placeholder(tf.float32, [None, self.action_size])
        feed = tf.layers.dense(self.X, 256, activation = tf.nn.relu)
        self.logits = tf.layers.dense(feed, self.action_size)
        self.cost = tf.reduce_mean(tf.square(self.Y - self.logits))
        self.optimizer = tf.train.GradientDescentOptimizer(1e-5).minimize(
            self.cost
        )
        self.sess.run(tf.global_variables_initializer())

    def act(self, state):
        # 행동을 선택하는 메서드
        # epsilon-greedy 정책을 사용하여 랜덤 탐험 또는 현재 정책에 따른 행동 선택
        if random.random() <= self.epsilon:
            return random.randrange(self.action_size)
        return np.argmax(
            self.sess.run(self.logits, feed_dict = {self.X: state})[0]
        )

    def get_state(self, t):
        # 현재 시간을 기준으로 상태를 반환하는 메서드
        # 상태는 주어진 시간의 윈도우 크기에 따라 생성됨
        window_size = self.window_size + 1
        d = t - window_size + 1 # 현재 시간을 중심으로 한 윈도우의 시작 위치를 계산
        block = self.trend[d : t + 1] if d >= 0 else -d * [self.trend[0]] + self.trend[0 : t + 1]
        res = [] # 주가의 차이를 계산하여 각 시간 단계에서의 주가 변동을 나타내는 리스트를 생성
        for i in range(window_size - 1):
            res.append(block[i + 1] - block[i])
        return np.array([res])

    def replay(self, batch_size):
        # 메모리에서 랜덤하게 샘플링하여 신경망을 학습하는 메서드
        # Q-learning 및 experience replay 기법 활용
        mini_batch = []
        l = len(self.memory)

        # 메모리에서 랜덤하게 배치 크기만큼 데이터를 샘플링
        for i in range(l - batch_size, l):
            mini_batch.append(self.memory[i])

        # 입력과 출력을 저장할 배열 초기화
        replay_size = len(mini_batch)
        X = np.empty((replay_size, self.state_size))
        Y = np.empty((replay_size, self.action_size))
        # 샘플링된 미니배치에서 상태와 새로운 상태를 추출
        states = np.array([a[0][0] for a in mini_batch])
        new_states = np.array([a[3][0] for a in mini_batch])

         # 현재 상태에 대한 Q값과 새로운 상태에 대한 Q값 계산
        Q = self.sess.run(self.logits, feed_dict = {self.X: states})
        Q_new = self.sess.run(self.logits, feed_dict = {self.X: new_states})

        # 미니배치를 이용하여 Q-learning 업데이트 수행
        for i in range(len(mini_batch)):
            state, action, reward, next_state, done = mini_batch[i]
            target = Q[i]
            target[action] = reward
            if not done:
                target[action] += self.gamma * np.amax(Q_new[i])
            X[i] = state
            Y[i] = target

        # 신경망 학습 및 비용 계산
        cost, _ = self.sess.run(
            [self.cost, self.optimizer], feed_dict = {self.X: X, self.Y: Y}
        )

        # epsilon 감소 (랜덤 탐험 확률을 낮춤)
        if self.epsilon > self.epsilon_min:
            self.epsilon *= self.epsilon_decay
        return cost

    def buy(self, initial_money):
        # 주식을 매수하는 메서드
        # 현재 정책에 따라 주식을 매수하고 매도하는 로직 구현
        # 초기 자본 저장
        starting_money = initial_money
        # 매수 및 매도 상태를 저장할 리스트 초기화
        states_sell = []
        states_buy = []
        # 보유 중인 주식을 저장할 인벤토리 초기화
        inventory = []
        # 초기 상태 설정
        state = self.get_state(0)

        # 시간에 따라 주식 거래 진행
        for t in range(0, len(self.trend) - 1, self.skip):
            action = self.act(state)
            next_state = self.get_state(t + 1)

            # Buy
            if action == 1 and initial_money >= self.trend[t] and t < (len(self.trend) - self.half_window):
                inventory.append(self.trend[t])
                initial_money -= self.trend[t]
                states_buy.append(t)
                print('day %d: buy 1 unit at price %f, total balance %f'% (t, self.trend[t], initial_money))

            # sell
            elif action == 2 and len(inventory):
                bought_price = inventory.pop(0)
                initial_money += self.trend[t]
                states_sell.append(t)
                try:
                    invest = ((close[t] - bought_price) / bought_price) * 100
                except:
                    invest = 0
                print(
                    'day %d, sell 1 unit at price %f, investment %f %%, total balance %f,'
#                     % (t, close[t], invest, initial_money)
                )

            state = next_state
        invest = ((initial_money - starting_money) / starting_money) * 100
        total_gains = initial_money - starting_money
        return states_buy, states_sell, total_gains, invest

    def train(self, iterations, checkpoint, initial_money):
        # 주어진 에폭 동안 에이전트를 훈련하는 메서드
        # 주식 거래를 시뮬레이션하면서 학습 진행 및 통계 출력
        for i in range(iterations):
            total_profit = 0
            inventory = []
            state = self.get_state(0)
            starting_money = initial_money

            # 각 에폭별로 주식 거래 시뮬레이션 진행
            for t in range(0, len(self.trend) - 1, self.skip):
                action = self.act(state)
                next_state = self.get_state(t + 1)

                # Buy
                if action == 1 and starting_money >= self.trend[t] and t < (len(self.trend) - self.half_window):
                    inventory.append(self.trend[t])
                    starting_money -= self.trend[t]
                # Sell
                elif action == 2 and len(inventory) > 0:
                    bought_price = inventory.pop(0)
                    total_profit += self.trend[t] - bought_price
                    starting_money += self.trend[t]

                # 현재 상태 및 거래 결과를 메모리에 저장
                invest = ((starting_money - initial_money) / initial_money)
                self.memory.append((state, action, invest,
                                    next_state, starting_money < initial_money))
                state = next_state

                # 경험 리플레이를 사용하여 신경망을 학습하고 비용 계산
                batch_size = min(self.batch_size, len(self.memory))
                cost = self.replay(batch_size)

            # 주어진 checkpoint에 도달할 때마다 훈련 결과 출력
            if (i+1) % checkpoint == 0:
                print('epoch: %d, total rewards: %f.3, cost: %f, total money: %f'%(i + 1, total_profit, cost,
                                                                                  starting_money))

"""# 4. Train the Agnet"""

close = df.Close.values.tolist()
initial_money = 10000
window_size = 30
skip = 1
batch_size = 32
agent = Agent(state_size = window_size,
              window_size = window_size,
              trend = close,
              skip = skip,
              batch_size = batch_size)
agent.train(iterations = 400, checkpoint = 50, initial_money = initial_money)

"""# 5. Test the Agent"""

states_buy, states_sell, total_gains, invest = agent.buy(initial_money = initial_money)

"""# 6. Polt the Signals"""

fig = plt.figure(figsize = (15,5))
plt.plot(close, color='r', lw=2.)
plt.plot(close, '^', markersize=10, color='m', label = 'buying signal', markevery = states_buy)
plt.plot(close, 'v', markersize=10, color='k', label = 'selling signal', markevery = states_sell)
plt.title('Q-learning \n total gains %f, total investment %f%%'%(total_gains, invest))
plt.legend()
plt.show()

print('total gains %f, total investment %f%%'%(total_gains, invest))